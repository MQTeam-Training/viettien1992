{"version":3,"sources":["components/useBookAll.js","components/BookAll.js","components/useBook.js","components/Book.js","App.js","serviceWorker.js","index.js"],"names":["useBookAll","useState","books","setBooks","useEffect","axios","get","then","response","data","catch","error","console","log","BookAll","useStyles","makeStyles","table","minWidth","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","index","key","scope","id","namebook","author","description","publication_date","useBook","props","book","isLoading","setIsLoading","match","params","finally","Link","textDecoration","Book","history","useHistory","Button","variant","onClick","push","App","exact","path","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9a4fe845.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nfunction useBookAll() {\r\n        const [books, setBooks] = useState([]);\r\n        useEffect(() => {\r\n            axios.get('https://tientran-laravel-book.herokuapp.com/api/book')\r\n                .then(function (response) {\r\n                    // handle việc lấy dữ liệu thành công\r\n                    setBooks(\r\n                        response.data\r\n                    )\r\n                })\r\n                .catch(function (error) {\r\n                    // handle lỗi\r\n                    console.log(error);\r\n                })\r\n        });\r\n        return books;\r\n}\r\nexport default useBookAll;","import useBookAll from './useBookAll';\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nfunction BookAll() {\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n    const books = useBookAll();\r\n        const classes = useStyles();\r\n        return (\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>id</TableCell>\r\n                            <TableCell align=\"right\">namebook</TableCell>\r\n                            <TableCell align=\"right\">author</TableCell>\r\n                            <TableCell align=\"right\">description</TableCell>\r\n                            <TableCell align=\"right\">NXB</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {books.map((row,index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell component=\"th\" scope=\"row\">{row.id}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{row.namebook}</TableCell>\r\n                                <TableCell align=\"right\">{row.author}</TableCell>\r\n                                <TableCell align=\"right\">{row.description}</TableCell>\r\n                                <TableCell align=\"right\">{row.publication_date}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        )\r\n}\r\nexport default BookAll;","import {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nfunction useBook(props) {\r\n    const [book,setBooks] = useState([]);\r\n    const [isLoading,setIsLoading] = useState(false);\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const { id } =props.match.params;\r\n        console.log(id);\r\n        axios.get(`https://tientran-laravel-book.herokuapp.com/api/book/${id}`)\r\n            .then(function (response) {\r\n                // handle việc lấy dữ liệu thành công\r\n                setBooks(\r\n                    response.data\r\n                )\r\n            })\r\n            .catch(function (error) {\r\n                // handle lỗi\r\n                console.log(error);\r\n            })\r\n            .finally(()=>{\r\n                setIsLoading(\r\n                    false\r\n                );\r\n            })\r\n\r\n    },[props.match.params]);\r\n    return [book,isLoading];\r\n}\r\nexport default useBook;","import { useHistory } from \"react-router-dom\";\r\nimport useBook from './useBook';\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    Link:{\r\n        textDecoration:\"none\",\r\n    }\r\n});\r\nfunction Book (props){\r\n    let history = useHistory();\r\n    const book=useBook(props)[0];\r\n    const isLoading=useBook(props)[1];\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            {isLoading===true &&(\r\n                <div>is loading</div>)}\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>id</TableCell>\r\n                            <TableCell align=\"right\">namebook</TableCell>\r\n                            <TableCell align=\"right\">author</TableCell>\r\n                            <TableCell align=\"right\">description</TableCell>\r\n                            <TableCell align=\"right\">NXB</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {book.map((row,index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.id}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{row.namebook}</TableCell>\r\n                                <TableCell align=\"right\">{row.author}</TableCell>\r\n                                <TableCell align=\"right\">{row.description}</TableCell>\r\n                                <TableCell align=\"right\">{row.publication_date}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <Button variant=\"outlined\" onClick={() => {history.push(\"/book\");}}>Back</Button>\r\n        </>\r\n    )\r\n}\r\nexport default Book;","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport BookAll from './components/BookAll';\r\nimport Book from './components/Book';\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                    <Route exact path=\"/book\" component={BookAll}/>\r\n                    <Route path='/book/:id'  component={Book} />\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}